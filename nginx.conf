user deploy;


worker_processes auto;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
#worker_rlimit_nofile 1000000;

pid /run/nginx.pid;



events {
        # determines how much clients will be served per worker
        # max clients = worker_connections * worker_processes
        # maximum number of connections that can be processed at one time by each worker process.
	worker_connections 999999;
	# multi_accept on;
	# essential for linux, optmized to serve many clients with each thread
	use epoll;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# copies data between one FD and other from within the kernel
	# faster then read() + write()
	sendfile on;

        #log_format  main  '$remote_addr - $remote_user [$time_local] $status '
        #              '"$request" $body_bytes_sent "$http_referer" '
        #              '"$http_user_agent" "$http_x_forwarded_for" ($request_time)';


	# send headers in one peace, its better then sending them one by one 
	tcp_nopush on;

	# don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;

        # cache informations about FDs, frequently accessed files
        # can boost performance, but you need to test those values
	open_file_cache max=200000 inactive=5s; 
	open_file_cache_valid 15s; 
	open_file_cache_min_uses 1;
	open_file_cache_errors off;

	#access_log /var/log/nginx/access.log buffer=16k;
	access_log /var/log/nginx/access.log;

	# only log critical errors
	#error_log /var/log/nginx/error.log  #crit;

	# to boost IO on HDD we can disable access logs
	#access_log off;
	#error_log off;


	#The client_body_timeout and client_header_timeout directives are responsible for the time a server will wait 
	#for a client body or client header to be sent after request. If neither a body or header is sent, the server will 
	#issue a 408 error or Request time out.

	#client_body_timeout 12;
	#client_header_timeout 12;

	#The keepalive_timeout assigns the timeout for keep-alive connections with the client. Simply put, Nginx will close connections with the client after this period of time.

	#keepalive_timeout 900;

	#send_timeout is established not on the entire transfer of answer, but only between two operations of reading; if after this time client will take nothing, then Nginx is shutting down the connection.
	#send_timeout 10;

	# number of requests client can make over keep-alive -- for testing
	keepalive_requests 100;

	# allow the server to close connection on non responding client, this will free up memory
	#reset_timedout_connection on;


	#his handles the client buffer size, meaning any POST actions sent to Nginx. POST actions are typically form submissions
	client_body_buffer_size 10K;
	
	#Similar to the previous directive, only instead it handles the client header size. For all intents and purposes, 1K is usually a decent size for this directive.
	client_header_buffer_size 1k;

	#The maximum allowed size for a client request. If the maximum size is exceeded, then Nginx will spit out a 413 error or Request Entity Too Large.
	client_max_body_size 8m;

	#The maximum number and size of buffers for large client headers
	large_client_header_buffers 2 1k;


	gzip off;
	#gzip_disable "msie6";
	#gzip_vary on;
	#gzip_proxied any;
	#gzip_comp_level 6;
	#gzip_buffers 16 8k;
	#gzip_http_version 1.1;
	#gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
